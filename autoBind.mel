global proc string createJointByObj(string $obj, int $isRoot){
	$t = getAttr($obj+".translate");
	$r = getAttr($obj+".rotate");
	$s = getAttr($obj+".scale");
	string $name;
	if ($isRoot) {
		$name = "root";
	}else{
		string $strs[];
		tokenize $obj "|" $strs;
		$name = $strs[size($strs)-1];
	}
	string $joint = `joint -p $t[0] $t[1] $t[2] -s $s[0] $s[1] $s[2] -n $name`;
	rotate $r[0] $r[1] $r[2] $joint;
	$chilren = `listRelatives -c -f -typ "transform" $obj`;
	for ($c in $chilren) {
		select $joint;
		createJointByObj($c,false);
	}
	return $joint;
}

global proc string[] autoBind(){
	$objs = `ls -sl -l`;
	select -d;
	string $joints[];
	for($i=0; $i<size($objs); $i++){
		$joints[$i] = createJointByObj($objs[$i],($i==0));
		select $joints[0];
	}
	print("joint ready!");
	string $uniteInfo[] = `polyUnite -ch 1 -mergeUVSets 1 $objs`;
	print("combin objects complete! newObject: " + $uniteInfo[0]);
	string $skin[] = `skinCluster -mi 2 $joints[0] $uniteInfo[0]`;
	return {$uniteInfo[0], $skin[0]};
}

// 获取物体世界坐标变换矩阵
global proc matrix getWorldXformMatrix(string $obj){
	string $parents[] = `listRelatives -p -f $obj`;
	if(size($parents)==0){
		// 没有上级返回本级
		return array2Matrix44(getAttr($obj+".xformMatrix "));
	}else{
		// 有上级本级*上级
		matrix $pmt[4][4] = getWorldXformMatrix($parents[0]);
		matrix $mt[4][4] = array2Matrix44(getAttr($obj+".xformMatrix"));
		return matrix44Multiply($mt, $pmt);
	}
}

// 获取物体世界坐标
global proc float[] getWorldTranslate(string $obj){
	matrix $mt[4][4] = getWorldXformMatrix($obj);
	return {$mt[3][0],$mt[3][1],$mt[3][2]};
}

$joint = `ls -sl -type "joint"`;
$vtx = `filterExpand -ex false -sm 31`;
skinPercent( "-transformValue", $joint[0], 1.0, "skinCluster1", $vtx);

pointMatrixMult($p, $m);


global proc resetObjectPivot(string $obj){
	float $rp[] = getAttr($obj+".rp");
	float $rpt[] = getAttr($obj+".rpt");
	matrix $p[1][4] = array2Matrix14(arrayPlus($rp,$rpt));
	matrix $mt[4][4] = array2Matrix44(getAttr($obj+".xformMatrix"));
	matrix $op[1][4] = matrix14Multiply($p, $mt);
	move -r (-$op[0][0]) (-$op[0][1]) (-$op[0][2]) $obj;
	makeIdentity -apply true -t 1 -r 0 -s 0 -n 0 $obj;
	move -r ($op[0][0]) ($op[0][1]) ($op[0][2]) $obj;
}
global proc resetLocalPivot()
{
	$sel = `ls -sl -type "transform"`;
	for($obj in $sel)
	{
		float $rp[] = getAttr($obj+".rp");
		float $rpt[] = getAttr($obj+".rpt");
		matrix $p[1][4] = array2Matrix14(arrayPlus($rp,$rpt));
		matrix $mt[4][4] = getWorldXformMatrix($obj);
		matrix $wp[1][4] = matrix14Multiply($p, $mt);
		
		float $pwt[];
		string $parents[] = `listRelatives -p -f $obj`;
		if(size($parents)>0){
			matrix $pmt[4][4] = getWorldXformMatrix($parents[0]);	
			$pwt = {$pmt[3][0],$pmt[3][1],$pmt[3][2]};
		}else{
			$pwt = {0.0,0.0,0.0};
		}
		print($pwt);
		print($wp);
		move -rpr $pwt[0] $pwt[1] $pwt[2] $obj;
		makeIdentity -apply true -t 1 -r 0 -s 0 -n 0 $obj;
		move -rpr $wp[3][0] $wp[3][1] $wp[3][2]) $obj;
	}
}

global proc exportMayaToFbx(string $path){
	string $fileList[] = `getFileList -folder $path -fs "*.mb"`;
	for ($f in $fileList) {
		string $filePath = $path + $f;
		string $outPath = $path + "fbx/" + $f;
		print("导出文件："+$filePath);
		file -f -options "v=0;"  -typ "mayaBinary" -o $filePath;
		file -force -options "v=0;" -type "FBX export" -pr -ea $outPath;
	}
}
$path = "D:/Users/chirp/Documents/baiduCloud/xx_job/kaku/jobs/Warship2016Binding/";


$objs = `ls -sl -l`;
string $vtxGroups[] = {};
int $start = 0;
for($i=0; $i<size($objs); $i++){
    $vtxs = `filterExpand -ex true -sm 31 ($objs[$i] + ".vtx[*]")`;
    $end = $start+size($vtxs)-1;
    $vtxGroups[$i] = ".vtx["+$start+":"+$end+"]";
    $start = $end + 1;
}
string $uniteInfo[] = `polyUnite -ch 1 -mergeUVSets 1 $objs`;
select ($uniteInfo[0] + $vtxGroups[0]);
print $objs;


global proc importMaya(string $path){
	string $fileList[] = `getFileList -folder $path -fs "*.mb"`;
	for ($f in $fileList) {
		string $filePath = $path + $f;
		string $p = $path + $f;
		print("引用文件："+$p);
		file -import -type "mayaBinary" -ra true -gl -mergeNamespacesOnClash true -namespace "xx" -options "v=0;" $p;
		group -n $f "|xx:root" "|xx:Body";
	}
}
importMaya("D:/Users/chirp/Documents/baiduCloud/xx_job/kaku/jobs/Warship2016Binding/Using/")